/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Button;

use Core.Annotations.BindValue;
use Core.Annotations.Event;
use Core.Components.Button.ButtonModel;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Interfaces.ComponentInterface;
use Core.UI.Component;
use Core.UI.PocketModel;


class Button extends Component
{
	
	public ButtonModel model;
	
	
	
	/**
	 * Returns model name
	 */
	lambda string modelName() => classof ButtonModel;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%button{
				padding: 6px 12px;
				cursor: pointer;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda Collection<UIStruct> render(ButtonModel model, UIStruct ui, PocketModel pocket) =>
		<button
			@class='button'
			@tag={ ui.props.get("@tag", "") }
			@annotations=[
				new Event{
					"event": classof MouseClickEvent, 
					"method_name": "onButtonClick"
				}
			]
		>{ ui.children }</button>
	;
	
	
	
	
	/* ---------------------------------- Events ----------------------------------- */
	
	
	/**
	 * Button click
	 */
	public void onButtonClick(UIEvent<MouseClickEvent> e)
	{
		this.signalOut(e.event);
	}
	
}
